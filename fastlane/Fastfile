# Skip docs generation
skip_docs

release_notes_command = "git log HEAD --pretty=format:\"%s\" -1"

before_all do |lane, options|
  load_env_file
end

private_lane :load_env_file do |lane, options|
  env_name = lane_context[SharedValues::ENVIRONMENT]
  Dotenv.overload(".env.#{env_name}.secret")
end

private_lane :update_version do
  version_number = 0
  if ENV['DEPLOY_TARGET'] == 'playstore'
    begin
        version_number = (google_play_track_version_codes(
          package_name: ENV['PACKAGE_NAME'],
          json_key: ENV['GOOGLE_PLAY_STORE_SERVICE_ACCOUNT_CREDENTIALS'],
          track: 'internal'
        )[0].to_i + 1)
    rescue Exception
        version_number = 1
    end
  elsif ENV['DEPLOY_TARGET'] == 'appcenter'
    old_version_number = appcenter_fetch_version_number()
    version_number = old_version_number['build_number'].to_i + 1
  end
  sh "sed -E -i \"s/0.0.0-development/$(git describe --abbrev=7 --tags --always --first-parent)/\" ../app/build.gradle.kts"
  sh "sed -E -i \"s/versionCode \= 1/versionCode \= #{version_number.to_s}/\" ../app/build.gradle.kts"
end

lane :build do
  gradle(task: ENV['ANDROID_GRADLE_TASK'])
end

private_lane :deploy_appcenter do
  appcenter_upload(
    apk: ENV['ANDROID_APK_PATH'],
    release_notes: %x[#{release_notes_command}],
  )
end

private_lane :deploy_playstore do
  supply(
    aab: ENV['ANDROID_APK_PATH'],
    json_key: ENV['GOOGLE_PLAY_STORE_SERVICE_ACCOUNT_CREDENTIALS'],
    track: 'internal',
    package_name: ENV['PACKAGE_NAME'],
    skip_upload_apk: true,
    release_status: 'draft',
    in_app_update_priority: ENV['IN_APP_UPDATES_PRIORITY'].to_i
  )
end

lane :deploy do
  if ENV['DEPLOY_TARGET'] == 'appcenter'
    deploy_appcenter
  elsif ENV['DEPLOY_TARGET'] == 'playstore'
    deploy_playstore
  end
end

lane :distribute do
  update_version
  build
  deploy
end
